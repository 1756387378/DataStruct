#pragma warning(disable:4996)
//#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <Windows.h>
#include <time.h>
#include <math.h>

#define FrameX 30								//迷宫大小
#define FrameY 30
#define WALL 0									//表示墙
#define ROUTE 1									//表示路

typedef struct move
{
	int movex, movey;
}Item;											//方向结构体

typedef struct type
{
	int x, y, d;
}DataType;										//保存在栈中的位置及方向

typedef struct stack
{
	DataType path[500];
	int top;
}Stack;											//定义栈结构体

typedef struct map
{
	int maze[FrameX + 2][FrameY + 2];
}Map;
Item move[4];									//方向数组

//函数原型
Map *GenerationMaze(Map *G, int x, int y);
int FindPath(Map *G, Stack *temp, int t);

int main()
{
	int t, direct, t2;
	Map *G = NULL;
	Stack *temp = NULL;
	srand((unsigned)time(NULL));
	G = (Map *)malloc(sizeof(Map));
	temp = (Stack *)malloc(sizeof(Stack));
	for (int i = 0; i < FrameX + 2; i++) {
		G->maze[i][0] = ROUTE;
		G->maze[0][i] = ROUTE;
		G->maze[i][FrameY + 1] = ROUTE;
		G->maze[FrameX + 1][i] = ROUTE;
	}
	G->maze[2][1] = ROUTE;								//入口为（2，1)
	G = GenerationMaze(G, 2, 1);
	for (int i = FrameX - 1; i >= 0; i--) {				//设置出口
		if (G->maze[i][FrameY - 1] == ROUTE) {
			G->maze[i][FrameY] = ROUTE;
			t = i;
			break;
		}
	}
	FindPath(G, temp, t);
	for (int i = 0; i < FrameX + 2; i++)
	{
		for (int j = 0; j < FrameY + 2; j++)
		{
			if (G->maze[i][j] == ROUTE || G->maze[i][j] == 3 || G->maze[i][j] == 4)
				printf("  ");
			else
				printf("▇");
		}
		printf("\n");
	}
	for (int i = 0; i < FrameX + 2; i++)
	{
		for (int j = 0; j < FrameY + 2; j++)
		{
			t2 = temp->top;
			while (t2 != -1)
			{
				if (temp->path[t2].x == i && temp->path[t2].y == j)
				{
					direct = temp->path[t2].d;
					break;
				}
				t2--;
			}
			if (G->maze[i][j] == 3)
			{

				if (direct == 0)
					printf("→");
				else if (direct == 1)
					printf("↓");
				else if (direct == 2)
					printf("←");
				else if (direct == 3)
					printf("↑");
			}
			else if (G->maze[i][j] == ROUTE || G->maze[i][j] == 4)
				printf("  ");
			else
				printf("▇");
		}
		printf("\n");
	}
	/*while (temp->top != -1)
	{
	if (temp->path[temp->top].d == 0)
	printf("坐标(%d, %d) 当前方向→\n", temp->path[temp->top].x, temp->path[temp->top].y);
	else if (temp->path[temp->top].d == 1)
	printf("坐标(%d, %d) 当前方向↓\n", temp->path[temp->top].x, temp->path[temp->top].y);
	else if (temp->path[temp->top].d == 2)
	printf("坐标(%d, %d) 当前方向←\n", temp->path[temp->top].x, temp->path[temp->top].y);
	else if (temp->path[temp->top].d == 3)
	printf("坐标(%d, %d) 当前方向↑\n", temp->path[temp->top].x, temp->path[temp->top].y);
	temp->top--;
	}*/
	free(G);
	free(temp);
	system("pause");
}

int FindPath(Map *G, Stack *temp, int t)
{
	int x, y, ds, i, j;
	move[0].movex = 0;					//往右
	move[0].movey = 1;

	move[1].movex = 1;					//往下
	move[1].movey = 0;

	move[2].movex = 0;					//往左
	move[2].movey = -1;

	move[3].movex = -1;					//往上
	move[3].movey = 0;

	temp->top = 0;						//初始化栈
	temp->path[temp->top].x = 2;
	temp->path[temp->top].y = 1;
	temp->path[temp->top].d = -1;
	while (temp->top != -1)
	{
		x = temp->path[temp->top].x;	//出栈
		y = temp->path[temp->top].y;
		ds = temp->path[temp->top].d + 1;
		temp->top--;
		while (ds < 4)
		{
			i = x + move[ds].movex;
			j = y + move[ds].movey;
			if (G->maze[i][j] == ROUTE)
			{
				temp->top++;					   //当前位置入栈
				temp->path[temp->top].x = x;
				temp->path[temp->top].y = y;
				temp->path[temp->top].d = ds;
				x = i;
				y = j;
				G->maze[x][y] = 3;					//G->maze[i][j] = 3表示已经访问过该点
				if (x == t && y == FrameY)
				{
					temp->top++;					//出口入栈
					temp->path[temp->top].x = x;
					temp->path[temp->top].y = y;
					temp->path[temp->top].d = ds;
					return 0;
				}
				else
					ds = 0;
			}
			else
				ds++;
		}
		if (ds == 4)
			G->maze[x][y] = 4;
	}
	return 0;
}


Map *GenerationMaze(Map *G, int x, int y)
{
	int dx, dy, r;
	G->maze[x][y] = ROUTE;
	int  next[4][2] = {
		{ 0, 1 },
		{ 1, 0 },
		{ 0, -1 },
		{ -1, 0 }
	};
	for (int i = 0; i < 4; i++) {
		r = rand() % 4;								//产生随机方向
		int temp = next[0][0];						//调整顺序
		next[0][0] = next[r][0];
		next[r][0] = temp;
		temp = next[0][1];
		next[0][1] = next[r][1];
		next[r][1] = temp;
	}
	for (int i = 0; i < 4; i++)
	{
		dx = x + next[i][0];
		dy = y + next[i][1];

		if (G->maze[dx][dy] == ROUTE)				//不能往回走
			continue;
		int count = 0;
		for (int j = dx - 1; j < dx + 2; j++)		//判断是否构成通路
		for (int k = dy - 1; k < dy + 2; k++)
		if (abs(dx - j) + abs(dy - k) == 1 && G->maze[j][k] == ROUTE)
			count++;
		if (count > 1)
			continue;
		G->maze[dx][dy] = ROUTE;
		GenerationMaze(G, dx, dy);
	}
	return G;
}
